/**{ 
        [
          {
            type: "text", 
            name: "email",
            placeholder: "E-mail address",
            styles: "input[type='email']",
            onChange: onInputChange,
            value: fields.email,
            validate: (val: string) => isEmail(val) ? undefined : "Enter an e-mail address",
            serverFunction: expressApi.fieldExistsInDB,
            required: true,
          },
          {
            type: "text", 
            name: "username",
            placeholder: "Username",
            styles: "input[type='text']",
            onChange: onInputChange,
            value: fields.username,
            validate: () => undefined,
            serverFunction: expressApi.fieldExistsInDB,
            required: true,
          },
          {
            type: "password",
            name: "password",
            placeholder: "Password",
            styles: "input[type='password']",
            onChange: onInputChange,
            value: fields.password,
            validate: () => undefined,
            required: true,
          },
        ].map((attrs) => (
            attrs.serverFunction ? 
              <div key={attrs.name} className="p-1 flex justify-center w-full col-full border-0 px-0">
                <ServerConnectedFormField 
                  type={attrs.type} 
                  name={attrs.name} 
                  placeholder={attrs.placeholder} 
                  styles={attrs.styles.concat(' w-full')}
                  onChange={attrs.onChange }
                  value={attrs.value}
                  validate={attrs.validate}
                  serverFunction={attrs.serverFunction}
                  required={attrs.required}
                />
              </div> 
            :
              <div key={attrs.name} className="p-1 flex justify-center w-full col-full border-0 px-0">
                <ValidateFormField 
                  type={attrs.type} 
                  name={attrs.name} 
                  placeholder={attrs.placeholder} 
                  styles={attrs.styles.concat(' w-full')}
                  onChange={attrs.onChange }
                  value={attrs.value}
                  validate={attrs.validate}
                  required={attrs.required}
                />
              </div>
          ))
      }

      */

// ################################################################################################################################

/**
 * 
 * import React, { useState, useEffect } from 'react';

export type GenericOnChange = (obj: { name: string; value: string; error?: string | undefined }) => void
type PlainFormFieldOnChange = (obj: { name: string; value: string; }) => void
type OptionalGenericOnChange = GenericOnChange | PlainFormFieldOnChange;

type PlainFormFieldProps = {
  placeholder?: string;
  name: string;
  type: string;
  value: string;
  onChange: OptionalGenericOnChange;
  styles: string;
  required: boolean;
  handleBlur?: (evt: React.FocusEvent<HTMLInputElement>) => void;
};

type ValidateFormFieldProps = PlainFormFieldProps & {
  validate: (value: string) => string | undefined;
  onChange: OptionalGenericOnChange;
};


type ServerConnectedFormFieldProps = PlainFormFieldProps & {
  validate: (value: string) => string | undefined;
  onChange: OptionalGenericOnChange;
  serverFunction: (fieldName: string, value: string) => Promise<RecordCheckResponse>;
};

export interface RecordCheckResponse extends Response {
  exists: boolean;
}

const PlainFormField: React.FC<PlainFormFieldProps> = ({ 
  placeholder, 
  name, 
  type, 
  value, 
  onChange, 
  styles, 
  required,
  handleBlur
}) => {
  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {
    const value = evt.target.value;
    onChange({ name: evt.target.name, value });
  };

  return (
    <div className="w-full">
      <div className="flex">
        <input
          type={type}
          name={name}
          placeholder={placeholder || ''}
          value={value}
          onChange={handleChange}
          onBlur={handleBlur}
          className={styles}
          onFocus={(e: React.FocusEvent<HTMLInputElement>) => e.target.placeholder = ""}
        />
        {required ? <span className='text-noct-orange text-2xl pl-1'>*</span> : <div className='ml-2 pl-1'></div>}
      </div>
    </div>
  );
}

// ### Check input with a validate function
const withValidation = (BaseComponent: React.FC<PlainFormFieldProps>) => {
  return ({ validate, onChange, ...props }: ValidateFormFieldProps) => {
    const [value, setValue] = useState(props.value)
    const [error, setError] = useState<string | undefined>(undefined)
    const enhancedOnChange = useEnhancedOnChange(onChange, validate)

    useEffect(() => {
      if (error) {
       setError(error)
      }
    }, [error]);

    return <BaseComponent {...props} value={value} onChange={enhancedOnChange} />
  }
}
// ### Check input with the server
const withExpressApiCall = (BaseComponent: React.FC<PlainFormFieldProps>) => {
  return ({ validate, onChange, serverFunction, ...props }: ServerConnectedFormFieldProps) => {
    const [value, setValue] = useState(props.value)
    const [error, setError] = useState<string | undefined>(undefined)
    const enhancedOnChange = useEnhancedOnChange(onChange, validate)

    const handleBlur = async (evt: React.FocusEvent<HTMLInputElement>) => {
      const value = evt.target.value;
      const name = evt.target.name;
      let error = validate ? validate(value) : undefined;
      if(!value){
        return;
      }
      await serverFunction(name, value)
        .then(async (data: RecordCheckResponse) => {
          if (data.exists) {
            setValue(value);
            error = `${name} already in use`;
            setError(error);
            onChange({name, value, error})
          } else {
            error = undefined
            setValue(value);
            setError(error);
            onChange({name, value, error})
          }
        })
    }

    return <BaseComponent {...props} value={value} onChange={enhancedOnChange} handleBlur={handleBlur} />
  }
}

const useEnhancedOnChange = (onChange: OptionalGenericOnChange, validate?: Function) => {
   // Inner function to handle the event
   const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {
    const value = evt.target.value;
    const error = validate ? validate(value) : undefined;

    if (typeof onChange === 'function') {
      (onChange as GenericOnChange)({ name: evt.target.name, value, error });
    }
  }

  // Wrapper function to transform the function type
  const wrapperFunction: OptionalGenericOnChange = (obj: any) => {
    handleChange({
      target: {
        name: obj.name,
        value: obj.value,
      },
    } as React.ChangeEvent<HTMLInputElement>);
  }

  return wrapperFunction
};

const ExpressApiCallFormField = withExpressApiCall(PlainFormField)
const ValidateFormField = withValidation(PlainFormField)
export { PlainFormField, ValidateFormField, ExpressApiCallFormField }
 */

type PlainFormFieldOnChange = (obj: { name: string, value: string }) => void;
type ValidateFormFieldOnChange = (obj: { name: string, value: string, error: string | undefined }) => void;

type PlainFormFieldProps = {
  placeholder?: string;
  name: string;
  type: string;
  value: string;
  onChange: PlainFormFieldOnChange
  styles: string;
  required: boolean;
};

export interface RecordCheckResponse extends Response {
  exists: boolean;
}

const PlainFormField: React.FC<PlainFormFieldProps> = ({ 
  placeholder, 
  name, 
  type, 
  value: propsValue, 
  onChange, 
  styles, 
  required,
}) => {
  const { value, handleChange } = useFormField(propsValue, onChange);

  return (
    <div className="w-full">
      <div className="flex">
        <input
          type={type}
          name={name}
          placeholder={placeholder || ''}
          value={value}
          onChange={handleChange}
          className={styles}
          onFocus={(e: React.FocusEvent<HTMLInputElement>) => e.target.placeholder = ""}
        />
        {required ? <span className='text-noct-orange text-2xl pl-1'>*</span> : <div className='ml-2 pl-1'></div>}
      </div>
    </div>
  );
}

// ### Check input with a validate function
type ValidateFormFieldProps = {
  placeholder?: string;
  name: string;
  type: string;
  value: string;
  validate: (value: string) => string | undefined;
  onChange: ValidateFormFieldOnChange
  styles: string;
  required: boolean;
};

const ValidateFormField: React.FC<ValidateFormFieldProps> = ({ 
  placeholder, 
  name, 
  type, 
  value: propsValue, 
  validate,
  onChange, 
  styles, 
  required,
}) => {
  const { value, error, handleChange } = useFormField(propsValue, onChange, validate);

  return (
    <div className="w-full">
      <span className="text-noct-orange">{error}</span>
      <div className="flex">
        <input
          type={type}
          name={name}
          placeholder={placeholder || ''}
          value={value}
          onChange={handleChange}
          className={styles}
          onFocus={(e: React.FocusEvent<HTMLInputElement>) => e.target.placeholder = ""}
        />
        {required ? <span className='text-noct-orange text-2xl pl-1'>*</span> : <div className='ml-2 pl-1'></div>}
      </div>
    </div>
  );
}

// ### Check input with the server

type ServerConnectedFormFieldProps = {
  placeholder?: string;
  name: string;
  type: string;
  value: string;
  validate: (value: string) => string | undefined;
  onChange: (obj: {name: string, value: string, error: string | undefined}) => void;
  styles: string;
  serverFunction: (fieldName: string, value: string) => Promise<RecordCheckResponse>;
  required: boolean;
};

const ServerConnectedFormField: React.FC<ServerConnectedFormFieldProps> = ({ 
  placeholder, 
  name, 
  type, 
  value: propsValue, 
  validate, 
  onChange, 
  styles, 
  serverFunction, 
  required,
}) => {
  const { value, error, handleChange, handleBlur } = useFormField(propsValue, onChange, validate, serverFunction);

  return (
    <div className="w-full">
      <span className="text-noct-orange">{error}</span>
      <div className="flex">
        <input
          type={type}
          name={name}
          placeholder={placeholder || ''}
          value={value}
          onChange={handleChange}
          className={styles}
          onFocus={(e: React.FocusEvent<HTMLInputElement>) => e.target.placeholder = ""}
          onBlur={handleBlur}
        />
        {required ? <span className='text-noct-orange text-2xl pl-1'>*</span> : <div className='ml-2 pl-1'></div>}
      </div>
    </div>
  );
}

// ### Abstract common logic shared from FormField components

const useFormField = (
  propsValue: string,
  onChange: PlainFormFieldOnChange | ValidateFormFieldOnChange,
  validate?: (arg: string) => string | undefined,
  serverFunction?: (fieldName: string, value: string) => Promise<RecordCheckResponse>
) => {
  const [value, setValue] = useState(propsValue);
  const [error, setError] = useState<string | undefined>(undefined);

  useEffect(() => {
    setValue(propsValue);
  }, [propsValue]);

  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {
    const value = evt.target.value;
    const error = validate ? validate(value) : undefined;

    setValue(value);
    setError(error);

    onChange({name: evt.target.name, value, error});
  };

  const handleBlur = async (evt: React.FocusEvent<HTMLInputElement>) => {
    if (!serverFunction) return;

    const value = evt.target.value;
    const name = evt.target.name;
    let error = validate ? validate(value) : undefined;
    if(!value){
      return;
    }
    await serverFunction(name, value)
      .then(async (data: RecordCheckResponse) => {
        if (data.exists) {
          setValue(value);
          error = `${name} already in use`;
          setError(error);
          onChange({name, value, error})
        } else {
          error = undefined
          setValue(value);
          setError(error);
          onChange({name, value, error})
        }
      })
  };

  return { value, error, handleChange, handleBlur };
};

export { PlainFormField, ValidateFormField, ServerConnectedFormField }